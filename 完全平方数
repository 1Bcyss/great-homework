/*给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。
给你一个整数 n ，返回和为 n 的完全平方数的 最少数量 。
完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。
Input
一个整数n
Output
和为 n 的完全平方数的最少数量

Sample Input 1 
12
Sample Output 1
3
解释：12 = 4 + 4 + 4     3是构成和为12的完全平方数的最小数量
Sample Input 2 
13
Sample Output 2
2
解释：13 = 4 + 9       2是构成和为13的完全平方数的最小数量*/

import java.util.Arrays;
import java.util.Scanner;
public class Main{

    public static int numSquares(int n) {
        // 创建一个数组 dp，其中 dp[i] 表示将数字 i 分解为平方数和所需的最少个数
        int[] dp = new int[n + 1];

        // 初始化数组，dp[0] 为 0，其他位置初始化为正无穷
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;

        // 遍历从 1 到 n 的每个数
        for (int i = 1; i <= n; i++) {
            // 尝试所有小于 i 的平方数
            for (int j = 1; j * j <= i; j++) {
                dp[i] = Math.min(dp[i], dp[i - j * j] + 1);
            }
        }

        // 返回将 n 分解为平方数和的最少个数
        return dp[n];
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int targetSum = scanner.nextInt();
        System.out.println( numSquares(targetSum));
    }
}
